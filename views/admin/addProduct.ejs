<%- include('../layouts/adminHeader.ejs') %>
<%- include('../layouts/adminPanelSidebar.ejs') %>
 
<style>
  #image-error {
    font-size: 14px;
    background-color: #f8d7da;
    color: #721c24;
    padding: 10px;
    border-radius: 5px;
    margin-top: 10px;
}

</style>

    <!--start main wrapper-->
    <main class="main-wrapper">
      <div class="main-content">
        <!--breadcrumb-->
        <div class="page-breadcrumb d-none d-sm-flex align-items-center mb-3">
          <div class="breadcrumb-title pe-3">LuxeWatches</div>
          <div class="ps-3">
            <nav aria-label="breadcrumb">
              <ol class="breadcrumb mb-0 p-0">
                <li class="breadcrumb-item"><a href="javascript:;"><i class="bx bx-home-alt"></i></a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">Add Product</li>
              </ol>
            </nav>
          </div>


        </div>
        <!--end breadcrumb-->
        <form id="addProductForm" method="post" action="/admin/addproduct" enctype="multipart/form-data">
          <div class="row">
            <div class="col-12 col-lg-8">
              <div class="card">
                <div class="card-body">
                  <div class="mb-4">
                    <h5 class="mb-3">Name</h5>
                    <input type="text" id="name" name="name" class="form-control" placeholder="write product name here....">
                    <div id="name-error" class="message" style="color: red;"></div>
                  </div>
                  <div class="mb-4">
                    <h5 class="mb-3">Product Description</h5>
                    <textarea class="form-control" id="description" name="description" cols="4" rows="6"
                      placeholder="write a description here.."></textarea>
                    <div id="description-error" class="message" style="color: red;"></div>
                  </div>

                 <!--  <div class="mb-4">
                    <h5 class="mb-3">Add Images</h5>
                    <div class="image-upload-container" style="display: flex; flex-wrap: wrap; gap: 10px;">
                      <label class="btn btn-primary" style="display: flex; align-items: center; background-color: #007bff; border: none; color: white; padding: 10px 20px; font-size: 16px; cursor: pointer; border-radius: 5px;">
                        <i class="bx bx-image-add" style="margin-right: 5px;"></i> Upload Images
                        <input type="file" id="imageUploader" name="images[]" accept=".jpg, .png, image/jpeg, image/png" multiple hidden onchange="handleImageUpload(event)">
                      </label>
                    </div>
                    <div id="imagePreviews" style="display: flex; flex-wrap: wrap; gap: 10px;"></div>
                  </div> -->

                  <div class="mb-4">
                    <h5 class="mb-3">Add Images</h5>
                    <div class="image-upload-container" style="display: flex; flex-wrap: wrap; gap: 10px;">
                        <div class="image-upload">
                            <label class="btn btn-primary"
                                style="display: flex; align-items: center; background-color: #007bff; border: none; color: white; padding: 10px 20px; font-size: 16px; cursor: pointer; border-radius: 5px;">
                                <i class="bx bx-image-add" style="margin-right: 5px;"></i> Upload Images
                                <input type="file" name="images" accept=".jpg, .png, image/jpeg, image/png" hidden multiple onchange="handleFiles(event)">
                            </label>
                        </div>
                    </div>

                    <div id="image-error" class="message" style="color: red; font-weight: bold;"></div>
  
                    <div id="image-previews" style="display: flex; flex-wrap: wrap; gap: 10px;"></div>
                </div>
                
                  
                  <!-- Modal for Image Cropping -->
                  <div id="cropModal" style="display: none;">
                    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 20px; z-index: 1000;">
                      <div style="max-width: 100%; max-height: 100%;">
                        <img id="imageToCrop" src="" alt="Image to Crop" style="max-width: 100%; max-height: 500px;">
                      </div>
                      <button onclick="cropImage()" id="cropSave" class="btn btn-success mt-3">Crop & Save</button>
                      <button onclick="closeCropModal()" id="cropCancel" class="btn btn-secondary mt-3">Cancel</button>
                    </div>
                  </div>
                  <div class="overlay btn-toggle" style="display: none;"></div>
                  


                  <div class="mb-4" style="margin-top: 60px;">
                    <h5 class="mb-3">Inventory</h5>

                    <div class="row g-3">
                 

                      <div class="d-flex gap-3">
                        <div class="flex-fill">
                          <label for="OriginalPrice" class="form-label">Selling Price</label>
                          <input type="number" class="form-control" id="price" name="price" placeholder="Enter Price">
                          <div id="price-error" class="message" style="color: red;"></div>
                        </div>
                    
                      </div>


                      <!-- 
                      <div class="col-12">
                        <label for="Collection" class="form-label">Stock</label>
                        <input type="text" class="form-control" id="Collection" placeholder="Enter Stock in Number">
                      </div> -->

                      <div style="margin-top: 40px;">
                        <h5 style="margin-bottom: 20px;">Organize</h5>

                        <div class="d-flex gap-3">
                          <div class="flex-fill">
                            <label for="AddCategory" class="form-label">Category</label>
                            <select class="form-select" id="addCategory" name="category">
                              <% if(categoryData.length !== 0){ %>
                              <% for(let i=0; i<categoryData.length; i++) { %>
                              <option value="<%= categoryData[i]._id %>"><%= categoryData[i].name %></option>
                              <% } %>
                              <% } %>
                            </select>
                          </div>

                          <div class="flex-fill">
                            <label for="addBrand" class="form-label">Brand</label>
                            <select class="form-select" id="addBrand" name="brand">
                              <% if(brandData.length !== 0){ %>
                              <% for(let i=0; i<brandData.length; i++) { %>
                              <option value="<%= brandData[i]._id %>"><%= brandData[i].brandName %></option>
                              <% } %>
                              <% } %>
                            </select>
                          </div>

                          <!-- <div class="flex-fill">
                            <label for="Brand" class="form-label">Brand</label>
                            <input type="text" class="form-control" id="brand" name="brand" placeholder="Enter Brand Name">
                            <div id="brand-error" class="message" style="color: red;"></div>
                          </div> -->
                          <div class="flex-fill">
                            <label for="Model" class="form-label">Model</label>
                            <input type="text" class="form-control" id="model" name="model" placeholder="Enter Model">
                            <div id="model-error" class="message" style="color: red;"></div>
                          </div>
                        </div>

                        <div class="col-12" style="margin-top: 40px;">
                          <!-- <h5 class="mb-3">Additional Details</h5> -->
                          <div class="d-flex gap-3">
                            <div class="flex-fill">
                              <label for="DialColor" class="form-label">Dial Color</label>
                              <input type="text" class="form-control" id="dialColor" name="dialColor" placeholder="Enter Dial Color">
                              <div id="dialColor-error" class="message" style="color: red;"></div>
                            </div>
                            <div class="flex-fill">
                              <label for="StrapColor" class="form-label">Strap Color</label>
                              <input type="text" class="form-control" id="strapColor" name="strapColor" placeholder="Enter Strap Color">
                              <div id="strap-error" class="message" style="color: red;"></div>
                            </div>
                            <div class="flex-fill">
                              <label for="InStock" class="form-label">In Stock</label>
                              <input type="number" class="form-control" id="quantity" name="stock"
                                placeholder="Enter Stock Quantity">
                              <div id="stock-error" class="message" style="color: red;"></div>
                            </div>
                          </div>
                        </div>

                    
                        <div class="d-flex align-items-center gap-3" style="margin-top: 80px;">
                          <button type="button" class="btn btn-outline-danger flex-fill"><i
                              class="bi bi-x-circle me-2"></i>Discard</button>
                          <button id="savebutton" type="submit" class="btn btn-outline-success flex-fill"><i
                              class="bi bi-cloud-download me-2"></i>Save</button>
                        </div>

                        <div class="col-12 col-lg-9">
                          <div class="tab-content">

                            <div class="tab-pane fade show active" id="Shipping">
                              <div class="d-flex flex-column h-100">

                                <div class="flex-1">

                                </div>
                                <div class="mb-4">
                                  <div class="form-check mb-1">

                                  </div>
                                </div>
                                <!-- <p class="fs--1 fw-semi-bold mb-0">See our <a class="fw-bold" href="#!">Delivery terms and conditions </a>for details.</p> -->
                              </div>
                            </div>


                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 col-lg-4">


              </div>

            </div><!--end row-->
          </div>
        </form>
    </main>
    <!--end main wrapper-->


    <!--start overlay-->
    <div class="overlay btn-toggle"></div>
    <!--end overlay-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />

    <script>

let selectedFiles = [];
// let imageData = []
let cropper;

document.getElementById('cropSave',).addEventListener('click', async function(event) {
  event.preventDefault();  
});

document.getElementById('cropCancel').addEventListener('click', async function(event){
  event.preventDefault()
});



function handleFiles(event) {
  const files = Array.from(event.target.files);
  const newFiles = selectedFiles.concat(files);

  // if (newFiles.length < 3) {
  //   alert('Please select at least 3 images.');
  //   return;
  // }
  if (newFiles.length < 3) {
        document.getElementById('image-error').textContent = 'Please select at least 3 images.'; // Display error message
        return;
    } else {
        // Clear error message when there are enough images
        document.getElementById('image-error').textContent = '';
    }

  selectedFiles = newFiles.slice(0, 5);  
  updateImagePreviews();
}

function updateImagePreviews() {
  const previewContainer = document.getElementById('image-previews');
  previewContainer.innerHTML = '';

  selectedFiles.forEach((file, index) => {
    const reader = new FileReader();
    reader.onload = function () {
      const dataURL = reader.result;
      const imagePreview = document.createElement('img');
      imagePreview.src = dataURL;
      imagePreview.style.maxWidth = '100px';
      imagePreview.style.cursor = 'pointer';
      imagePreview.onclick = () => openCropModal(dataURL, index);
      previewContainer.appendChild(imagePreview);
    };
    reader.readAsDataURL(file);
  });
}


function openCropModal(imageSrc, index) {
  const cropModal = document.getElementById('cropModal');
  const overlay = document.querySelector('.overlay');
  const imageToCrop = document.getElementById('imageToCrop');

  imageToCrop.src = imageSrc;
  cropModal.style.display = 'block';
  overlay.style.display = 'block';

  if (cropper) {
    cropper.destroy();
  }

  cropper = new Cropper(imageToCrop, {
    aspectRatio: 1,
    viewMode: 1,
  });

  cropModal.dataset.index = index;
}

function cropImage() {
  const index = parseInt(document.getElementById('cropModal').dataset.index);
  const croppedCanvas = cropper.getCroppedCanvas();
  croppedCanvas.toBlob((blob) => {
    const croppedFile = new File([blob], `cropped_image_${index}.jpg`, { type: 'image/jpeg' });
    selectedFiles[index] = croppedFile;
    updateImagePreviews();
    closeCropModal();
  }, 'image/jpeg');
}

function closeCropModal() {
  const cropModal = document.getElementById('cropModal');
  const overlay = document.querySelector('.overlay');

  cropModal.style.display = 'none';
  overlay.style.display = 'none';

  if (cropper) {
    cropper.destroy();
  }
}
 
    
      
      document.getElementById('savebutton').addEventListener('click', async function (event) {
        event.preventDefault();

        const form = document.getElementById('addProductForm');

        // Retrieve the files from the file input
    const imageInput = document.querySelector('input[type="file"]');
    const files = imageInput.files;

    // if (files.length < 3) {
    //     alert('Please upload at least three images before submitting the form.');
    //     return;
    // }
    if (files.length < 3) {
        document.getElementById('image-error').textContent = 'Please upload at least three images before submitting the form.'; // Show error message
        return;
    } else {
        document.getElementById('image-error').textContent = ''; // Clear error message
    }
      
        const name = document.getElementById('name').value.trim();
        const description = document.getElementById('description').value.trim();
        const price = document.getElementById('price').value.trim();
        const model = document.getElementById('model').value.trim();
        const dialColor = document.getElementById('dialColor').value.trim();
        const strapColor = document.getElementById('strapColor').value.trim();
        const stock = document.getElementById('quantity').value.trim();

  
        // const nameRegex = /^[a-zA-Z0-9\s]+$/;
        const nameRegex = /^(?=.*[a-zA-Z])[a-zA-Z0-9\s]+$/;
    if (!nameRegex.test(name) || name.length < 5) {
      showError('name-error', 'Name must be required and contain only alphabets, spaces, and numbers and at least 5 characters long.');
      return;
    } else {
      hideError('name-error');
    }

    const descriptionRegex = /^[a-zA-Z0-9\s!"#$%&'()*+,-./:;<=>?@[\\\]^_`{|}~]+$/;
    if (!descriptionRegex.test(description) || description.length < 6) {
      showError('description-error', 'Description must contain only alphabets, spaces, numbers, and symbols, and must be at least 6 characters long.')
      return;
    } else {
      hideError('description-error');
    }

    const priceRegex = /^\d+$/;
    if (!priceRegex.test(price) || price <= 0) {
      showError('price-error', 'Invalid Price!')
      return;
    } else {
      hideError('price-error');
    }

    // const modelRegex = /^[a-zA-Z0-9\s-]{1,20}$/;
    const modelRegex = /^[a-zA-Z0-9][a-zA-Z0-9\s_-]{0,18}[a-zA-Z0-9]$/;

    if (!modelRegex.test(model) || model.length < 1) {
      showError('model-error', 'Model cannot be empty, cannot exceed 20 characters in length, and must contain only alphanumeric characters, spaces, or dashes.')
      return;
    } else {
      hideError('model-error');
    }

    const dialRegex = /^[a-zA-Z\s]+$/;
    if (!dialRegex.test(dialColor) || dialColor.length < 3) {
      showError('dialColor-error', 'Dial color cannot be empty and must only contain letters and spaces, and be at least 3 characters in length.')
      return;
    } else {
      hideError('dialColor-error')
    }

    const strapRegex = /^[a-zA-Z\s-]{3,30}$/;
    if (!strapRegex.test(strapColor) || strapColor.length < 3) {
      showError('strap-error', 'Strap color is invalid. Please use only letters, spaces, or dashes and ensure the length is between 3 and 30 characters.')
      return;
    } else {
      hideError('strap-error')
    }

    const stockRegex = /^\d+$/;
    if (!stockRegex.test(stock) || stock < 0) {
      showError('stock-error', 'Invalid stock value. Ensure it is a positive integer without any spaces or symbols.')
      return;
    } else {
      hideError('stock-error')
    }


        
        const formData = new FormData();
        
    //   selectedFiles.forEach((file, index) => {
    //  formData.append('images', file, `image_${index}.jpg`);
    // });
    Array.from(files).forEach((file, index) => {
        formData.append('images', file, `image_${index}.jpg`);
    });

   
    formData.append('name', document.getElementById('name').value);
    formData.append('description', document.getElementById('description').value);
    formData.append('price', document.getElementById('price').value);
    formData.append('category', document.getElementById('addCategory').value);
    formData.append('brand', document.getElementById('addBrand').value);
    formData.append('model', document.getElementById('model').value);
    formData.append('dialColor', document.getElementById('dialColor').value);
    formData.append('strapColor', document.getElementById('strapColor').value);
    formData.append('stock', document.getElementById('quantity').value);
    
    
   
        try {
          const response = await fetch('/admin/addproduct', {
            method: 'POST',
           
            body: formData,
          });
    
          const data = await response.json();
    
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: data.message
            }).then(() => {
              window.location.href = '/admin/products';
            });
          } else {
            Swal.fire({
              icon: 'warning',
              title: data.warning
            }).then(() => {
             
            });
          }
        } catch (error) {
          Swal.fire({
            icon: 'error',
            title: 'An error occurred',
            text: error.warning
          });
        }
      });
    
      function showError(errorId, message) {
        let errorElement = document.getElementById(errorId);
        errorElement.textContent = message;
      }
    
      function hideError(errorId) {
        let errorElement = document.getElementById(errorId);
        errorElement.textContent = '';
      }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    

       <%- include('../layouts/adminFooter.ejs') %>